{"name":"whatlastgenre","tagline":"Improves genre-metadata of audio-files based on tags from various music-sites.","body":"# whatlastgenre\r\n\r\nImproves genre metadata of audio files based on tags from various music sites.\r\n\r\n* Supported audio files: flac, ogg, mp3\r\n* Supported music sites: What, Last.FM, MusicBrainz, Discogs\r\n* Feature Overview\r\n\t* Gets genre tags from various music sites and merges, splits, filters and\r\n\tscores them.\r\n\t\t* Merges similar tags in different writings, eg.\r\n\t\tDnB, D&B, Drum and Bass -> Drum & Bass\r\n\t\t* Splitting by common separators, eg. Jazz+Funk -> Jazz, Funk;\r\n\t\tRock/Pop -> Rock, Pop; Jazz&Funk+Rock -> Jazz, Funk, Rock\r\n\t\t* Splitting by space for common prefixes,\r\n\t\tlike Alternative, Progressive, etc. (see tags.txt)\r\n\t\t* Filters them by personal preferences and preset or custom filters\r\n\t\t* Scores them with different methods while taking personal\r\n\t\tpreferences into account\r\n\t* Optional: writes release type (Album, EP, Anthology, ...) (from What)\r\n\t* Optional: writes MusicBrainz IDs\r\n\t* Optional: caches already proceeded albums to speed things up next time\r\n\t* Makes use of MusicBrainz IDs when possible\r\n\t\t* Recognizes and deletes invalid MBIDs.\r\n\t* Interactive mode, especially for release types and mbids\r\n\t(it's not guessing wrong data)\r\n\t\t* Progressive fuzzy matching to reduce needed user input\r\n\t\t* eg. MusicBrainz: Tries to identify artists by looking at its albums \r\n\t* Dry-mode for safe testing\r\n\r\n## How it works\r\nIt scans through folders for albums and receives genre tags for them and their\r\nartists from different music sites. The tags get merged, split up, filtered,\r\nscored and put together, then the best scored tags will be saved as genre\r\nmetadata in the corresponding album tracks. If a tag is supplied from more\r\nthen one source, their individual scores will be summed up. Equal tags in\r\ndifferent writings will be merged together.\r\n\r\n### Tags scoring with count (Last.FM, MusicBrainz, What partially)\r\nIf counts are supplied for the tags, they will get scored by `count/topcount`,\r\nwhere `topcount` is the highest count of all tags from a source. So the top\r\ntag gets a score of 1.0, a tag having only half of the top tag's count gets a\r\nscore of 0.5 and so on. \r\n\r\n### Tags scoring without count (Discogs, What partially)\r\nTags supplied without a count will be scored `0.85^(n-1)`, where `n` is the\r\ntotal number of tags supplied by this source. The more tags the lower the\r\nscore for each tag will be. So if only one tag is supplied, it will get a\r\nscore of 1.0, two tags will get a score of 0.85 each, three get 0.72 each\r\nand so on...\r\n\r\n### Score multiplier/modifier\r\n\r\n#### Score multiplier for different sources\r\nEvery source (What, Last.FM, MusicBrainz, Discogs) has its own score\r\nmultiplier, so sources that generally provide higher quality tags can be given\r\nadvantage over sources that often provide bad, inaccurate or personal tags.\r\n\r\n#### Split score multiplier\r\nThere is a score multiplier for modifying the score of the base tag from a tag\r\nthat got split up, this enables you to decide whether to keep, prefer or ban\r\nthe base tag. For example, lets say we have 'Alternative Rock' with a score of\r\n10. It will end up as Alternative with score 10, Rock with score 10, and\r\nAlternative Rock with score 10 * <splitscore>.\r\nSo if you don't want to keep Alternative Rock, just set it to 0. \r\n\r\n#### Artist score multiplier\r\nThere is an extra multiplier for tags gathered by searching for artists to\r\nenable multiple albums from one artist getting more equal tags.\r\n\r\n#### Personal score modifiers\r\nOne can set a list of tags that will get a multiplier bonus. Consider this as\r\nsome kind of \"soft\" white-/blacklist, where you can reduce the occurrence of\r\nhated or inaccurate tags without fully banning them.\r\n\r\nSee Configuration for more details.\r\nIf you have any ideas on improving this scoring, please let me know :)\r\n\r\n## Installation\r\n\r\n\t$ python setup.py install\r\n\r\n### Dependencies\r\n* musicbrainzngs\r\n* mutagen\r\n* requests\r\n\r\n## Configuration\r\n\r\nAn empty configuration file will be created on the first run. Make sure to\r\ncheck if your config file needs to be updated after installing a new version\r\n(although there shouldn't be much config file changes).\r\n\r\n### Example configuration file\r\n\t[whatcd]\r\n\tusername = whatusername\r\n\tpassword = whatpassword\r\n\t[genres]\r\n\tblacklist = charts, other, unknown\r\n\tscore_up = soundtrack\r\n\tscore_down = alternative, electronic, indie\r\n\tfilters = instrument, label, location, year\r\n\t[scores]\r\n\twhat.cd = 1.66\r\n\tlast.fm = 0.66\r\n\tmbrainz = 1.00\r\n\tdiscogs = 1.00\r\n\tartists = 1.33\r\n\tsplitup = 0.33\r\n\tuserset = 0.66\r\n\r\n\r\n### Configuration options explained\r\n\r\n#### genres section\r\n\r\n##### score_up, score_down option\r\nThis should be considered as \"soft\" white-/blacklist where you can in-/decrease\r\nthe occurrence of specific tags that you don't like or that are too inaccurate\r\nfor you without fully banning them like with the blacklist option. Tags listed\r\nhere will get a score bonus based on the configured multiplier.\r\n\r\n##### filters\r\nUse this to activate filtering of specific tag groups from genres:\r\n* instrument: filters instrument names, like guitar or piano\r\n* label: filters label names\r\n* location: filters country, city and nationality names\r\n* year: filters year tags, like 1980s\r\n* create your own filter lists by adding filter sections to the tags.txt file\r\n\r\nConsider custom filters as large blacklists.\r\n\r\n#### scores section\r\n\r\nBe careful when adjusting the score multipliers, setting them out of a\r\nreasonable range may lead to unexpected results and bad tags.\r\nDon't set them to negative values!\r\n\r\n##### what.cd, last.fm, mbrainz, discogs\r\n\r\nScore multipliers for the different sources. Default 1.0, increase if you\r\ntrust the tags from a source, lower if the source provides many inaccurate\r\nor personal tags. Should be between 0.5 and 2.0\r\n\r\n##### artists\r\n\r\nScore multiplier for tags found by artist/albumartist searches.\r\nThis enables that multiple albums from one artist get more equal tags.\r\n* =0 is NOT recommended\r\n* <1 means prefer album tags\r\n* =1 means no difference between album and artist tags\r\n* >1 means prefer artist tags\r\n\r\n##### splitup\r\n\r\nScore multiplier for the \"base\"-tag of tags that got split up.\r\n* =0: forget about the \"base\" tags\r\n* <1: prefer split parts\r\n* =1: handle them equally\r\n* >1: not recommended\r\nconsider using 0.01 instead of 0 if you don't like the base tags\r\n\r\n##### userset\r\n\r\n`1+/-x` score multiplier for tags set in score_{up,down}\r\n\r\n\r\n## Usage\r\n\t  \r\n\tusage: whatlastgenre.py [-h] [-v] [-n] [-i] [-r] [-m] [-c] [-l N]\r\n\t                        [--no-whatcd] [--no-lastfm] [--no-mbrainz]\r\n\t                        [--no-discogs] [--config CONFIG] [--cache CACHE]\r\n\t                        path [path ...]\r\n\t\r\n\tpositional arguments:\r\n\t  path                 folder(s) to scan for albums\r\n\t\r\n\toptional arguments:\r\n\t  -h, --help           show this help message and exit\r\n\t  -v, --verbose        more detailed output (default: False)\r\n\t  -n, --dry-run        don't save metadata (default: False)\r\n\t  -i, --interactive    interactive mode (default: False)\r\n\t  -r, --tag-release    tag release type (from What) (default: False)\r\n\t  -m, --tag-mbids      tag musicbrainz ids (default: False)\r\n\t  -c, --use-cache      cache processed albums (default: False)\r\n\t  -l N, --tag-limit N  max. number of genre tags (default: 4)\r\n\t  --no-whatcd          disable lookup on What (default: False)\r\n\t  --no-lastfm          disable lookup on Last.FM (default: False)\r\n\t  --no-mbrainz         disable lookup on MusicBrainz (default: False)\r\n\t  --no-discogs         disable lookup on Discogs (default: False)\r\n\t  --config CONFIG      location of the configuration file (default: ~/.whatlastgenre/config)\r\n\t  --cache CACHE        location of the cache (default: ~/.whatlastgenre/cache)\r\n\r\n\r\nIf you seriously want to tag release-types (-r) or musicbrainz-ids (-m) you\r\nshould also enable interactive-mode (-i). Consider to save the mbids (-m) when\r\nnot using --no-mbrainz, you searched for them, why not save them? ;)\r\nThink about using the cache feature (-c) if you have a large set of albums to\r\nspeed up things next time. Disabling music-sites is not recommended, the more\r\nsources the better tags.\r\n\r\n### Examples\r\n\r\nDo a verbose dry-run on your albums in /home/user/music changing nothing:\r\n\r\n\t$ whatlastgenre.py -vn /home/user/music\r\n\r\nTag max. 3 genre tags for all albums in /home/user/music:\r\n\r\n\t$ whatlastgenre.py -cl 3 /home/user/music\r\n\r\nTo get the most of it for all albums in /home/user/music and /media/music:\r\n\r\n\t$ whatlastgenre.py -cirml 5 /home/user/music /media/music\r\n\t\r\nJust tag release-types and mbids (this is not intended) on /media/music:\r\n\r\n\t$ whatlastgenre.py -cirml 0 --no-lastfm --no-discogs /media/music\r\n\r\n\r\n### Ended up with a tag that shouldn't be there?\r\n\r\n* If it's an impartial correct tag, just use score_down or blacklist to get\r\nrid of it.\r\n* If it's a label or location tag that should have been filtered, please name\r\nit to me so i can add it to the tags.txt file (do it yourself until i did it).\r\n* If the tag is personal, crappy or somehow else bad, just talk to me and i'll\r\ntry to find out what's happening and improve the scoring.\r\n\r\n## How to help\r\n\r\nThanks for being interested in helping to improve it :)\r\nThings you can tell me about:\r\n* Tag that are similar but haven't been merged or naming inconsistencies,\r\ne.g. 'Trip Hop' <-> 'Trip-Hop'\r\n* Tags that doesn't get split but should, or do get split but shouldn't.\r\n* Did i miss something in tags.txt?\r\n* If your unhappy with the tag results.\r\n* Any errors of course ;)\r\n\r\nI'm also happy for any other suggestions :)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}