{"name":"whatlastgenre","tagline":"Improve genre metadata of audio files based on tags from various music sites.","body":"# whatlastgenre\r\nImprove genre metadata of audio files based on tags from various music sites.\r\n\r\n* Supported audio files: flac, ogg, mp3, m4a\r\n* Supported music sites: Discogs, EchoNest, Last.FM, MusicBrainz, RateYourMusic, What.CD\r\n* Feature Overview\r\n  * Gets genre tags for artists and albums from music sites and finds the most\r\n  eligible ones.\r\n    * Merges similar tags in different writings to ensure consistent naming\r\n    via [aliases and regex](wlg/data/tags.txt)\r\n    * Splits tags in various applicable ways\r\n    * Uses a [whitelist](wlg/data/genres.txt) to avoid bad tags\r\n    * Scores tags while taking personal preferences into account\r\n  * Caches all data received from music sites to speedup reruns\r\n  * Uses MusicBrainz IDs for searching when available\r\n  * Optional: gets release info from whatcd (with interactivity if ambiguous)\r\n  * Can be used as plugin in other software, currently:\r\n  [beets](https://github.com/sampsyo/beets)\r\n  * Dry-mode for safe testing\r\n  * [Example output](https://gist.github.com/YetAnotherNerd/3e59c4d02f1930d9e52e)\r\n\r\n\r\n## How it works\r\nIt scans through directories for albums and receives genre tags for them and\r\ntheir artists from selected music sites. Equal tags in different writings will\r\nbe split and/or merged to ensure consistent names and proper scoring. Artist\r\nand album tags get handled separately and then merged using configurable score\r\nmodifiers. The best scored tags will be saved as genre metadata in the\r\ncorresponding album tracks. All data received from music sites gets cached so\r\nthat rerunning the script will be super fast. There are several score\r\nmultipliers to adjust the scoring to your needs and take your personal\r\npreferences into account. Please take a look at \"Configuration options\r\nexplained\" below for more details.\r\n\r\n##### Tag scoring with count/weights\r\n    echonest terms, lastfm, mbrainz, whatcd artist\r\nIf counts are supplied for the tags they will get scored by `count/topcount`,\r\nwhere `topcount` is the highest count of all tags from a source. So the top\r\ntag gets a score of `1.0`, a tag having only half of the top tag's count gets\r\na score of `0.5` and so on.\r\n\r\n##### Tag scoring without counts/weights\r\n     echonest genres, discogs, rymusic, whatcd album\r\nTags supplied without a count will be scored `max(1/3, 0.85^(n-1))`, where `n`\r\nis the total number of tags supplied by this source. The more tags the lower\r\nthe score for each tag will be. So if only one tag is supplied, it will get a\r\nscore of `1.0`, two tags will get a score of `0.85` each and so on. The minimum\r\nscore is `1/3`, which applies if there are more than 7 tags supplied.\r\n\r\n##### Tag merging of artist and album tags\r\nAfter all tags have been gathered the scores of album and artist tags will be\r\nscaled and then merged together taking the artist score modifier option into\r\naccount. This enables that multiple albums from one artist get more equal tags\r\nby giving tags found by artist searches advantage over tags found by album\r\nsearches.\r\nSee `artist` score option below.\r\n\r\n##### Tag scoring for various artist albums without any specific album artist\r\nIf there is no specific album artist for a various artist album every track\r\nartist can get used for searching. Tags for artists that appear multiple times\r\nin that album get counted multiple times.\r\nSee `vaqueries` and `various` options below.\r\n\r\n##### Multiple value metadata and old ID3 versions\r\nMutagen's ID3 API is primary targeted at id3v2.4, so by default any id3 tags\r\nwill be upgraded to 2.4 and saving a file will make it 2.4 as well.\r\nSee [mutagen doc]\r\n(https://mutagen.readthedocs.org/en/latest/tutorial.html#id3-versions)\r\nfor details.\r\nHowever, if you don't want to use v2.4 tags you can use the `id3v23sep` config\r\noption explained below.\r\n\r\n##### Release info tagging and interactitvity\r\n    releasetype, year, label, catalog, edition, media\r\nAlthough several steps are taken to reduce needed interactivity, like filtering\r\nby snatched flag (make sure to enable 'Snatched torrents indicator' in your\r\nwhatcd profile settings) or by year (if given), user input might be required\r\nwhile tagging releaseinfo in ambigious cases.\r\n`-r` implies interactivity, `n` disables interactivity. Be aware that `-r`\r\nsaves the original release year into the `date` metadata field.\r\n\r\n\r\n## Installation\r\nYou'll need Python 2.7.\r\n\r\nInstall the dependencies with your package manager, on Debian based distros run\r\nthis as root:\r\n\r\n    apt-get install python-mutagen python-requests\r\n\r\n* Alternatively, install the dependencies using python-pip:\r\n`pip install mutagen requests`\r\n* Clone the repository or download and unzip the [source package]\r\n(http://github.com/YetAnotherNerd/whatlastgenre/archive/master.zip)\r\n* Run it without install by using `./whatlastgenre` from the directory you\r\ncloned/extracted to\r\n* Install it by running `python setup.py install` as root in that directory\r\n\r\n##### Optional dependencies\r\n* `rauth` is required for Discogs. If you want to use Discogs, install `rauth`\r\nwith pip like above and activate `discogs` in the config file (see below).\r\n* `lxml` is required for RateYourMusic. If you want to use RateYourMusic,\r\ninstall `lxml` with pip like above and activate `rymusic` in the config file\r\n(see below).\r\n* `requests-cache` can additionally cache the raw queries from requests if\r\ninstalled. This is mainly a developers feature.\r\n\r\n\r\n## Configuration\r\nA configuration file with default values will be created at\r\n`~/.whatlastgenre/config` on first run.\r\n\r\n### Example configuration file\r\n```\r\n[wlg]\r\nsources = discogs, echonest, lastfm, mbrainz, whatcd\r\nwhitelist =\r\ntagsfile =\r\nvaqueries = True\r\nid3v23_sep =\r\n[genres]\r\nlove = trip-rock\r\nhate = alternative, electronic, indie, pop, rock\r\n[scores]\r\nartist = 1.33\r\nvarious = 0.66\r\nsplitup = 0.33\r\nminimum = 0.10\r\nsrc_discogs = 1.00\r\nsrc_echonest = 1.00\r\nsrc_lastfm = 0.66\r\nsrc_mbrainz = 0.66\r\nsrc_rymusic = 1.33\r\nsrc_whatcd = 1.50\r\n[discogs]\r\ntoken =\r\nsecret =\r\n[whatcd]\r\nsession =\r\n```\r\n\r\n### Configuration options explained\r\n\r\n#### whatlastgenre (wlg) section\r\n\r\n##### sources option\r\nSource | Artist | Album | Auth | ...\r\n-------|:------:|:-----:|:----:|-----\r\n[discogs](http://discogs.com) | 0 | 1 | 1 | fixed list of [genres and styles] (http://www.discogs.com/help/doc/submission-guidelines-release-genres-styles)\r\n[echonest](http://echonest.com)| 1 | 0 | 0 | genres without counts and terms with counts (see [doc](http://developer.echonest.com/docs/v4/))\r\n[lastfm](http://last.fm)| 1 | 1 | 0 |  many personal tags from users\r\n[mbrainz](http://musicbrainz.org) | 1 | 1 | 0 | home of mbids\r\n[rymusic](http://rateyourmusic.com) | 1 | 1 | 0 | no real api (slow)\r\n[whatcd](https://what.cd) | 1 | 1 | 1 | well-kept tags from community\r\n\r\n##### whitelist/tagsfile option\r\nPath to your custom whitelist and tagsfile. Use shipped\r\n[whitelist](wlg/data/genres.txt)/[tagsfile](wlg/data/tags.txt)\r\nif empty (default). Instead of setting the path here, you can also put the\r\nfiles in your config directory and they should get recognized (see debug log).\r\n\r\n##### vaqueries option\r\nSearch for all artists if there is no albumartist on albums with various\r\nartists. This will make queries for va-albums without an albumartist take\r\nsignificantly longer, but yields more results. (Default: `True`)\r\nSee `various` score option below.\r\n\r\n##### id3v23sep option\r\nBy (mutagen) default all id3 v2.3 tags will be upgraded to v2.4. Since v2.3\r\ncan't store multiple value metadata you need to set a seperator if you intend\r\nto use old v2.3 tags (not recommended).\r\nSetting this to a non-empty value (for example `,`) will downgrade all id3 tags\r\nto v2.3 and store all genres in one tag seperated by `id3v23sep` instead of\r\nusing v2.4 tags that can have multiple values. Empty by defaut.\r\nYou should upgrade your other software to support id3v24 instead of using this.\r\n\r\n#### genres section\r\n\r\n##### love and hate options\r\nList of tags that get a multiplier bonus of `2.0` and `0.5` respectively.\r\nShould be considered as \"soft white-/blacklist\" where you can in-/decrease the\r\noccurrence of specific tags that you don't like or that are too inaccurate for\r\nyou without fully banning them.\r\n\r\n#### scores section\r\n\r\n##### artist option\r\nScore multiplier to give tags found by albumartist searches advantage over tags\r\nfrom album searches. The tags get stored separately at first but then put\r\ntogether while taking this multiplier into account. This enables that multiple\r\nalbums from one artist get more equal tags.\r\n\r\n`<artist tags> * <artist score> + <album tags>`\r\n\r\nDefault `1.33`\r\n* `< 1.0` prefer album tags\r\n* `= 1.0` handle them equally\r\n* `> 1.0` prefer artist tags\r\n\r\n##### various option\r\nScore multiplier similar to the artist option, but this one applies to various\r\nartists releases if there is no albumartist and all the track artists get used\r\nfor searching, which can be controlled with the `vaqueries` option (see above).\r\nFor example: a 5 track va-album with 3 tracks from artist A and 2 tracks from\r\nartist B will get tags like this:\r\n\r\n`(3 * <artist A tags> + 2 * <artist B tags>) * <various score> + <album tags>`\r\n\r\nDefault `0.66`\r\n* `< 1.0` prefer album tags\r\n* `= 1.0` handle them equally\r\n\r\n##### splitup option\r\nScore multiplier for modifying the score of a tag that got split up by space.\r\nThis enables you to decide whether to keep, lessen or ignore the 'base' tags.\r\n\r\nDefault `0.33`\r\n* `= 0.0` forget about the base tags\r\n* `< 1.0` reduce score of base tags\r\n* `= 1.0` leave score unmodified\r\n\r\n##### minimum option\r\nMinimum score for final filtering.\r\n\r\nDefault `0.10`\r\n* `= 0.0` no minimum score\r\n* `= 1.0` same effect as `--tag-limit 1`\r\n\r\n##### src_* options\r\nEvery source has its own score multiplier, so music sites that generally\r\nprovide higher quality tags can be given advantage over sources that often\r\nprovide bad, inaccurate or personal tags. Increase if you trust the tags from\r\na source, lower if the source provides many inaccurate or personal tags. If you\r\ndon't want tags from a specific source remove it from the sources list option.\r\n\r\nDefault `1.0`, see `sources` option above.\r\n\r\n#### dataprovider related sections\r\n\r\n##### discogs token and secret options\r\nAuthentication information for discogs, will be set interactivly.\r\n\r\n##### whatcd session options\r\nSession cookie, will be received by interactively entering user credentials.\r\n\r\n\r\n## Usage\r\n```\r\nusage: whatlastgenre [-h] [-v] [-n] [-u] [-l N] [-r] [-d] path [path ...]\r\n\r\npositional arguments:\r\n  path                 path(s) to scan for albums\r\n\r\noptional arguments:\r\n  -h, --help           show this help message and exit\r\n  -v, --verbose        verbose output (-vv for debug) (default: 0)\r\n  -n, --dry            don't save metadata (default: False)\r\n  -u, --update-cache   force cache update (default: False)\r\n  -l N, --tag-limit N  max. number of genre tags (default: 4)\r\n  -r, --release        get release info from whatcd (default: False)\r\n  -d, --difflib        enable difflib matching (slow) (default: False)\r\n```\r\n\r\nIf you want to tag releasetypes `-r`, you should do a dry-run beforehand to\r\nfill the cache and then be able to choose the right results without much\r\nwaiting time in between.\r\n\r\nRemove the cache file to reset the cache or use `-u` to force cache updates.\r\n\r\nwhatlastgenre doesn't correct any other tags. If your music files are badly or\r\nnot tagged it won't work well at all.\r\n\r\n### Examples\r\nDo a verbose dry-run on your albums in /media/music changing nothing:\r\n\r\n\twhatlastgenre -vn /media/music\r\n\r\nTag up to 3 genre tags for all albums in /media/music and /home/user/music:\r\n\r\n\twhatlastgenre -l 3 /media/music /home/user/music\r\n\r\nTag releaseinfo and up to 4 genre tags for all albums in /media/music:\r\n\r\n\twhatlastgenre -r /media/music\r\n\r\n\r\n## Plugins\r\nwhatlastgenre can be used in other software via plugins.\r\n\r\nAt the moment there is a [plugin for beets](plugin/beets).\r\n\r\nSee README files in the [plugin](plugin) directory for details.\r\n\r\n\r\n## Help / Debug\r\n\r\n#### Errors / Bugs / Crashes\r\nIf you encounter any strange errors (especially after updating to a later\r\nversion), please delete the cache file and try again with an empty cache\r\nbefore reporting it (do a backup first in case it doesn't solve the issue).\r\n\r\n#### Mediaplayers and file modification times\r\nSince file modification times are preserved, some players don't realize the\r\nchanged genre metadata automatically and might require some manual steps, e.g.:\r\n\r\n* mpd: needs rescan instead of normal update to get the mpd database updated.\r\n\r\n#### Debug tag handling / Improve tag results\r\nIn order to debug tag handling to improve the whitelist and tagsfile, you can\r\ndo a debug dry run and save the output to a logfile (adjust path):\r\n\r\n    whatlastgenre -nvv /media/music > /tmp/wlg.log\r\n\r\nThen search the logfile for specific lines:\r\n\r\n    grep ^tag /tmp/wlg.log | sort | uniq -c | sort -r | less\r\n\r\nUse the results to add missing whitelist entries, aliases or replaces.\r\n\r\nFeel free to share your improvements to the [data/*.txt](wlg/data) files or\r\nsend me your logfile so i can use it for debugging myself.\r\n\r\nAnother way to find possbile aliases is using the difflib `-d` argument.\r\n\r\n\r\nPlease report any bugs and errors, i would like to fix them :)\r\n\r\nThanks to everyone who made suggestions and reported problems <3\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}