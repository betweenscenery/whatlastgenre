{"name":"whatlastgenre","tagline":"Improve genre metadata of audio files based on tags from various music sites.","body":"# whatlastgenre\r\n\r\nImproves genre metadata of audio files based on tags from various music sites.\r\n\r\n* Supported audio files: flac, ogg, mp3, m4a\r\n* Supported music sites: What.CD, Last.FM, MusicBrainz, Discogs, EchoNest\r\n* Feature Overview\r\n  * Gets genre tags for artists and albums from music sites and finds the most\r\n  eligible ones.\r\n    * Merges similar tags in different writings with aliases and regex\r\n    replacements to ensure consistent naming,\r\n    eg. DnB, D&B, Drum and Bass -> Drum & Bass;\r\n    Alt., Altern, Alterneitif -> Alternative\r\n    * Splits tags in various applicable ways, eg.\r\n    Jazz/Funk&Rock -> Jazz, Funk, Rock;\r\n    Alternative Rock -> Alternative, Rock\r\n    * Uses a whitelist to avoid crappy tags (see genres.txt)\r\n    * Scores tags while taking personal preferences into account\r\n  * Caches all data received from music sites to make reruns super fast\r\n  * Uses MusicBrainz IDs for searching when available\r\n  * Optional: gets release type (Album, EP, Anthology, ...) from What.CD\r\n  (with interactivity mode for ambiguous results)\r\n  * Can be used as plugin in 3rd party software, currently: beets\r\n  * Dry-mode for safe testing\r\n\r\n\r\n## How it works\r\nIt scans through folders for albums and receives genre tags for them and their\r\nartists from selected music sites. Equal tags in different writings will be\r\nsplit and/or merged to ensure consistent names and proper scoring. Artist and\r\nalbum tags get handled separately and then merged using configurable score\r\nmodifiers. The best scored tags will be saved as genre metadata in the\r\ncorresponding album tracks. All data received from music sites gets cached so\r\nthat rerunning the script will be super fast. There are several score\r\nmultipliers to adjust the scoring to your needs and take your personal\r\npreferences into account. Please take a look at \"Configuration options\r\nexplained\" below for more details.\r\n\r\n##### Tag scoring with count (What.CD, Last.FM, MusicBrainz)\r\nIf counts are supplied for the tags they will get scored by `count/topcount`,\r\nwhere `topcount` is the highest count of all tags from a source. So the top\r\ntag gets a score of `1.0`, a tag having only half of the top tag's count gets\r\na score of `0.5` and so on.\r\n\r\n##### Tag scoring without count (What.CD, Discogs, EchoNest)\r\nTags supplied without a count will be scored `max(0.1, 0.85^(n-1))`, where `n`\r\nis the total number of tags supplied by this source. The more tags the lower\r\nthe score for each tag will be. So if only one tag is supplied, it will get a\r\nscore of `1.0`, two tags will get a score of `0.85` each and so on. The minimum\r\nscore is `0.1`, which applies if there are more than 15 tags supplied.\r\n\r\n##### Tag merging of artist and album tags\r\nAfter all tags have been gathered the scores of album and artist tags will be\r\nscaled and then merged together taking the artist score modifier option into\r\naccount. This enables that multiple albums from one artist get more equal tags\r\nby giving tags found by artist searches advantage over tags found by album\r\nsearches.\r\nSee `artist` score option below.\r\n\r\n##### Tag scoring for various artist albums without any specific album artist\r\nIf there is no specific album artist for a various artist album every track\r\nartist can get used for searching. Tags for artists that appear multiple times\r\nin that album get counted multiple times.\r\nSee `vaqueries` and `various` options below.\r\n\r\n##### Multiple value metadata and old ID3 versions\r\nMutagen's ID3 API is primary targeted at id3v2.4, so by default any id3 tags\r\nwill be upgraded to 2.4 and saving a file will make it 2.4 as well.\r\nSee [mutagen doc here]\r\n(https://mutagen.readthedocs.org/en/latest/tutorial.html#id3-versions)\r\nfor details.\r\nHowever, if you don't want to use v2.4 tags you can use the `id3v23sep` config\r\noption explained below.\r\n\r\n##### Interactivity\r\nSometimes a dataprovider returns more then one result of tags. To know the\r\nright set user input might be required, but several steps are taken to\r\nreduce needed interactivity:\r\n* Prefilter album results by year (if given)\r\n* Prefilter whatcd album results by releasetype (if given)\r\n* Prefilter whatcd album results by snatched flag\r\n* Automatically merges the tags from few results\r\n    * only merge if all have the same releasetype if --tag-release is enabled\r\n* If there are still too many results, there are two options\r\n    * --tag-release, src is whatcd, no reltype, not snatched:\r\n    ask user if -i enabled\r\n    * don't take results into account\r\n\r\nSo, interactivity is only needed for setting proper releasetypes\r\nin some ambiguous cases.\r\n\r\n\r\n## Installation\r\nYou'll need Python 2.7.\r\n\r\nInstall the dependencies with your package manager, on Debian based distros run\r\nthis as root:\r\n\r\n    apt-get install python-mutagen python-requests\r\n\r\n* Alternatively, install the dependencies using python-pip:\r\n`pip install mutagen requests`\r\n* Clone the repository or download and unzip the [source package]\r\n(http://github.com/YetAnotherNerd/whatlastgenre/archive/master.zip)\r\n* Run it without install by using `./whatlastgenre` from the directory you\r\ncloned/extracted to\r\n* Install it by running `python setup.py install` as root in that directory\r\n\r\n##### Optional Dependencies\r\n* `rauth` is required for Discogs support. If you want to use\r\nDiscogs, install `rauth` with pip like above and activate `discogs` in the\r\nconfiguration file (see below).\r\n* `requests-cache` can additionally cache the raw queries from requests if\r\ninstalled. This is mainly a developers feature.\r\n\r\n\r\n## Configuration\r\nA configuration file with default values will be created at\r\n`~/.whatlastgenre/config` on first run.\r\n\r\n### Example configuration file\r\n```\r\n[wlg]\r\nsources = whatcd, lastfm, discogs, mbrainz\r\nwhatcduser = whatusername\r\nwhatcdpass = whatpassword\r\nwhitelist =\r\nvaqueries = True\r\nid3v23_sep =\r\n[genres]\r\nlove = trip-rock\r\nhate = alternative, electronic, indie, pop, rock\r\n[scores]\r\nartist = 1.33\r\nvarious = 0.66\r\nsplitup = 0.33\r\nsrc_whatcd = 1.50\r\nsrc_lastfm = 0.66\r\nsrc_mbrainz = 0.66\r\nsrc_discogs = 1.00\r\nsrc_echonest = 1.00\r\n```\r\n\r\n### Configuration options explained\r\n\r\n#### whatlastgenre (wlg) section\r\n\r\n##### sources option\r\nThe music sites where to get the genre tags from.\r\n* `whatcd` [[URL](https://what.cd)]\r\nwell-kept tags from community\r\n* `lastfm` [[URL](http://last.fm)]\r\nmany personal tags from users\r\n* `mbrainz` [[URL](http://musicbrainz.org)]\r\nhome of mbids\r\n* `discogs` [[URL](http://discogs.com)]\r\nalbum only, fixed list of [genres and styles]\r\n(http://www.discogs.com/help/doc/submission-guidelines-release-genres-styles),\r\nrequires authentication (own account needed)\r\n* `echonest` [[URL](http://echonest.com)]\r\nartist only, fixed list of\r\n[genres](http://developer.echonest.com/docs/v4/genre.html#list)\r\n\r\n##### whitelist option\r\nPath to your custom whitelist. Use shipped whitelist if empty (default).\r\n\r\n##### vaqueries option\r\nSearch for all artists if there is no albumartist on albums with various\r\nartists. This will make queries for va-albums without albumartist take\r\nsignificantly longer, but yields more results. (Default: `True`)\r\nSee `various` score option below.\r\n\r\n##### id3v23sep option\r\nBy (mutagen) default all id3 v2.3 tags will be upgraded to v2.4. Since v2.3\r\ncan't store multiple value metadata you need to set a seperator if you intend\r\nto use old v2.3 tags (not recommended).\r\nSetting this to a non-empty value (for example `,`) will downgrade all id3 tags\r\nto v2.3 and store all genres in one tag seperated by `id3v23sep` instead of\r\nusing v2.4 tags that can have multiple values. Empty by defaut.\r\nYou should upgrade your other software to support id3v24 instead of using this.\r\n\r\n#### genres section\r\n\r\n##### love and hate options\r\nList of tags that get a multiplier bonus of `2.0` and `0.5` respectively.\r\nShould be considered as \"soft white-/blacklist\" where you can in-/decrease the\r\noccurrence of specific tags that you don't like or that are too inaccurate for\r\nyou without fully banning them.\r\n\r\n#### scores section\r\n\r\n##### artist option\r\nScore multiplier to give tags found by albumartist searches advantage over tags\r\nfrom album searches. The tags get stored separately at first but then put\r\ntogether while taking this multiplier into account. This enables that multiple\r\nalbums from one artist get more equal tags.\r\n\r\n`<artist tags> * <artist score> + <album tags>`\r\n\r\nDefault `1.33`, Range `0.5 - 2.0`\r\n* `< 1.0` prefer album tags\r\n* `= 1.0` handle them equally\r\n* `> 1.0` prefer artist tags\r\n\r\n##### various option\r\nScore multiplier similar to artist option, but this one applies to various\r\nartists releases if there is no albumartist and all the track artists get used\r\nfor searching, which can be en/disabled with the `vaqueries` option (see above).\r\nFor example: a 5 track va-album with 3 tracks from artist A and 2 tracks from\r\nartist B will get tags like this:\r\n\r\n`(3 * <artist A tags> + 2 * <artist B tags>) * <various score> + <album tags>`\r\n\r\nDefault `0.66`, Range `0.1 - 1.0`\r\n* `< 1.0` prefer album tags\r\n* `= 1.0` handle them equally\r\n\r\n##### splitup option\r\nScore multiplier for modifying the score of the base tag from a tag that got\r\nsplit up by space. This enables you to decide whether to keep, prefer or ban\r\nthe base tags. For example, lets say we have 'Alternative Rock' with a score\r\nof 1: It will end up as Alternative with score 1, Rock with score 1 and\r\nAlternative Rock with score `1 * <splitup-score>`. So if you don't want to keep\r\nAlternative Rock, just set it to 0.\r\n\r\nDefault `0.33`, Range `0.0 - 1.0`\r\n* `= 0.0` forget about the base tags\r\n* `< 1.0` prefer split parts\r\n* `= 1.0` handle them equally\r\n\r\n##### src_* options\r\nEvery source has its own score multiplier, so music sites that generally\r\nprovide higher quality tags can be given advantage over sources that often\r\nprovide bad, inaccurate or personal tags. Increase if you trust the tags from\r\na source, lower if the source provides many inaccurate or personal tags. If you\r\ndon't want tags from a specific source remove it from the sources list option.\r\n\r\nDefault `1.0`, Range `0.5 - 2.0`. See `sources` option above.\r\n\r\n\r\n## Usage\r\n```\r\nusage: whatlastgenre [-h] [-v] [-n] [-u] [-l N] [-r] [-i] [-d] path [path ...]\r\n\r\npositional arguments:\r\n  path                 folder(s) to scan for albums\r\n\r\noptional arguments:\r\n  -h, --help           show this help message and exit\r\n  -v, --verbose        verbose output (-vv for debug) (default: 0)\r\n  -n, --dry            don't save metadata (default: False)\r\n  -u, --update-cache   force cache update (default: False)\r\n  -l N, --tag-limit N  max. number of genre tags (default: 4)\r\n  -r, --tag-release    tag release type (from What.CD) (default: False)\r\n  -i, --interactive    interactive mode (default: False)\r\n  -d, --difflib        enable difflib matching (slow) (default: False)\r\n```\r\n\r\nIf you seriously want to tag releasetypes `-r` you should also enable\r\ninteractive mode `-i`. I recommend first doing a dry-run to fill the cache and\r\nthen doing a normal run with `-ri` enabled. This way you can choose the right\r\nresults without much waiting time in between. You can use `-r` without `-i` but\r\nmight get less releasetypes.\r\n\r\nRemove the cache file to reset the cache or use `-u` to force cache updates.\r\n\r\nDon't waste your time running -n and -i together.\r\n\r\nwhatlastgenre doesn't correct any other tags. If your music files are badly or\r\nnot tagged it won't work well at all.\r\n\r\n### Examples\r\n\r\nDo a verbose dry-run on your albums in /media/music changing nothing:\r\n\r\n\twhatlastgenre -vn /media/music\r\n\r\nTag up to 3 genre tags for all albums in /media/music and /home/user/music:\r\n\r\n\twhatlastgenre -l 3 /media/music /home/user/music\r\n\r\nTag releasetypes and up to 4 genre tags for all albums in /media/music:\r\n\r\n\twhatlastgenre -ri /media/music\r\n\r\n\r\n## Plugins\r\n\r\nwhatlastgenre can be used in other software via plugins.\r\n\r\nAt the moment there is a plugin for beets.\r\n\r\nSee README files in plugin folder for details.\r\n\r\n\r\n## Help / Debug\r\n\r\nIn order to debug tag handling to improve the whitelist, aliases and replaces,\r\nyou can do the following:\r\n\r\nDo a debug dry run and save output to log:\r\n\r\n    whatlastgenre -nvv /media/music > /tmp/wlg.log 2>&1\r\n\r\nSearch the log for specific lines:\r\n\r\n    grep ^Error /tmp/wlg.log | sort -u | less\r\n    grep ^tag /tmp/wlg.log | sort | uniq -c | sort -r | less\r\n\r\nUse the results to add missing whitelist entries, aliases or replaces.\r\nShare your improvements to the data/*.txt files if you like.\r\n\r\nFeel free to send me your log file so i can use it for debugging myself.\r\n\r\nPlease report any bugs and errors you encounter, i would like to fix them :)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}